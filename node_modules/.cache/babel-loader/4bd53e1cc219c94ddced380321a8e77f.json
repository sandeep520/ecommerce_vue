{"ast":null,"code":"import axios from \"axios\";\nimport router from \"@/router\";\nexport default {\n  name: \"cart\",\n  props: [\"addCart\"],\n\n  data() {\n    return {\n      count: 1,\n      cart: [],\n      product: \"\"\n    };\n  },\n\n  methods: {\n    deleteProduct(id) {\n      let deleteCart = this.cart.indexOf(id);\n      this.cart.splice(deleteCart, 1);\n      localStorage.setItem(\"cart\", JSON.stringify(this.cart));\n    },\n\n    increment(id) {\n      let Cart = JSON.parse(localStorage.getItem(\"cart\"));\n      let findCart = Cart.find(data => {\n        return data.id == id;\n      });\n      findCart.quntity++;\n      localStorage.removeItem(\"cart\");\n      localStorage.setItem(\"cart\", JSON.stringify(Cart));\n      let updatecart = this.cart.find(data => {\n        return data.id == id;\n      });\n      updatecart.quntity++;\n    },\n\n    decrement(id) {\n      let Cart = JSON.parse(localStorage.getItem(\"cart\"));\n      let findCart = Cart.find(data => {\n        return data.id == id;\n      });\n\n      if (findCart.quntity > 0) {\n        findCart.quntity--;\n      }\n\n      localStorage.removeItem(\"cart\");\n      localStorage.setItem(\"cart\", JSON.stringify(Cart));\n      let updatecart = this.cart.find(data => {\n        return data.id == id;\n      });\n\n      if (updatecart.quntity > 0) {\n        updatecart.quntity--;\n      } else {\n        this.cart.splice(updatecart, 1);\n        localStorage.setItem(\"cart\", JSON.stringify(Cart));\n      }\n    },\n\n    moreItem() {\n      router.push(\"/\");\n    },\n\n    async addProduct() {\n      const result = await axios.get(\"https://fakestoreapi.com/products/\" + this.$route.params.id);\n      const {\n        title,\n        category,\n        description,\n        id,\n        image,\n        price\n      } = result.data;\n      const newCart = {\n        id: id,\n        title: title,\n        image: image,\n        price: price,\n        category: category,\n        description: description\n      };\n      let aa = [newCart];\n      let oldCart = JSON.parse(localStorage.getItem(\"cart\"));\n\n      if (oldCart != null) {\n        let findCart = oldCart.find(data => {\n          return data.id == newCart.id;\n        });\n        this.cart.push(findCart);\n        oldCart.find(otherdata => {\n          if (otherdata.id != newCart.id) {\n            this.cart.push(otherdata);\n          }\n        });\n      }\n    }\n\n  },\n\n  mounted() {\n    this.addProduct();\n  },\n\n  computed: {\n    ifEmpty() {\n      return this.cart.length === 0 ? \"Cart is empty....\" : undefined;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAwEA;AACA;AACA;EACAA,YADA;EAEAC,kBAFA;;EAGAC;IACA;MACAC,QADA;MAEAC,QAFA;MAGAC;IAHA;EAKA,CATA;;EAWAC;IACAC;MACA;MACA;MACAC;IACA,CALA;;IAMAC;MACA;MACA;QACA;MACA,CAFA;MAGAC;MACAF;MACAA;MAEA;QACA;MACA,CAFA;MAGAG;IACA,CAnBA;;IAoBAC;MACA;MACA;QACA;MACA,CAFA;;MAGA;QACAF;MACA;;MACAF;MACAA;MAEA;QACA;MACA,CAFA;;MAGA;QACAG;MACA,CAFA,MAEA;QACA;QACAH;MACA;IACA,CAxCA;;IAyCAK;MACAC;IACA,CA3CA;;IA4CA;MACA,+BACA,4DADA;MAIA;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;MACA;QACAF,MADA;QAEAH,YAFA;QAGAI,YAHA;QAIAC,YAJA;QAKAJ,kBALA;QAMAC;MANA;MAQA;MACA;;MACA;QACA;UACA;QACA,CAFA;QAGA;QACAI;UACA;YACA;UACA;QACA,CAJA;MAKA;IACA;;EAvEA,CAXA;;EAoFAC;IACA;EACA,CAtFA;;EAuFAC;IACAC;MACA;IACA;;EAHA;AAvFA","names":["name","props","data","count","cart","product","methods","deleteProduct","localStorage","increment","findCart","updatecart","decrement","moreItem","router","title","category","description","id","image","price","oldCart","mounted","computed","ifEmpty"],"sourceRoot":"src/components","sources":["Cart.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"mt-4\">Your Cart....</h1>\n    <h2 class=\"text-center mt-5\">{{ ifEmpty }}</h2>\n    <table v-if=\"cart\" class=\"table table-bordered mt-5\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Id</th>\n          <th scope=\"col\">Title</th>\n          <th scope=\"col\">Image</th>\n          <th scope=\"col\">Quantity</th>\n          <th scope=\"col\">Price</th>\n          <th scope=\"col\">Category</th>\n          <th scope=\"col\">Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"item in cart\" v-bind:key=\"item.id\">\n          <th scope=\"row\">{{ item.id }}</th>\n          <td>{{ item.title }}</td>\n          <td class=\"cart-img\">\n            <img v-bind:src=\"item.image\" />\n          </td>\n\n          <td class=\"d-flex\">\n            <button\n              v-on:click.prevent=\"decrement(item.id)\"\n              class=\"btn btn-primary mx-2\"\n            >\n              -\n            </button>\n            <p class=\"my-2\">{{ item.quntity }}</p>\n            <button\n              v-on:click.prevent=\"increment(item.id)\"\n              class=\"btn btn-primary mx-2\"\n            >\n              +\n            </button>\n          </td>\n\n          <td>{{ Number.parseFloat(item.price * item.quntity).toFixed(2) }}</td>\n          <td>{{ item.category }}</td>\n          <td>\n            <button @click=\"deleteProduct(item)\" class=\"btn btn-danger\">\n              Delete\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n<div class=\"pointer\">\n  <button\n      v-on:click=\"moreItem\"\n      style=\"margin-right: 15px\"\n      class=\"btn btn-primary mt-4\"\n    >\n      Continue Shopping....\n    </button>\n\n     <router-link to=\"/checkout\">\n    <button\n      style=\"margin-right: 15px\"\n      class=\"btn btn-primary mt-4\"\n    >\n      Check Out....\n    </button>\n     </router-link>\n  </div>\n</div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport router from \"@/router\";\nexport default {\n  name: \"cart\",\n  props: [\"addCart\"],\n  data() {\n    return {\n      count: 1,\n      cart: [],\n      product: \"\",\n    };\n  },\n\n  methods: {\n    deleteProduct(id) {\n      let deleteCart = this.cart.indexOf(id);\n      this.cart.splice(deleteCart, 1);\n      localStorage.setItem(\"cart\", JSON.stringify(this.cart));\n    },\n    increment(id) {\n      let Cart = JSON.parse(localStorage.getItem(\"cart\"));\n      let findCart = Cart.find((data) => {\n        return data.id == id;\n      });\n      findCart.quntity++;\n      localStorage.removeItem(\"cart\");\n      localStorage.setItem(\"cart\", JSON.stringify(Cart));\n\n      let updatecart = this.cart.find((data) => {\n        return data.id == id;\n      });\n      updatecart.quntity++;\n    },\n    decrement(id) {\n      let Cart = JSON.parse(localStorage.getItem(\"cart\"));\n      let findCart = Cart.find((data) => {\n        return data.id == id;\n      });\n      if (findCart.quntity > 0) {\n        findCart.quntity--;\n      }\n      localStorage.removeItem(\"cart\");\n      localStorage.setItem(\"cart\", JSON.stringify(Cart));\n\n      let updatecart = this.cart.find((data) => {\n        return data.id == id;\n      });\n      if (updatecart.quntity > 0) {\n        updatecart.quntity--;\n      } else {\n        this.cart.splice(updatecart, 1);\n        localStorage.setItem(\"cart\", JSON.stringify(Cart));\n      }\n    },\n    moreItem() {\n      router.push(\"/\");\n    },\n    async addProduct() {\n      const result = await axios.get(\n        \"https://fakestoreapi.com/products/\" + this.$route.params.id\n      );\n\n      const { title, category, description, id, image, price } = result.data;\n      const newCart = {\n        id: id,\n        title: title,\n        image: image,\n        price: price,\n        category: category,\n        description: description,\n      };\n      let aa = [newCart];\n      let oldCart = JSON.parse(localStorage.getItem(\"cart\"));\n      if (oldCart != null) {\n        let findCart = oldCart.find((data) => {\n          return data.id == newCart.id;\n        });\n        this.cart.push(findCart);\n        oldCart.find((otherdata) => {\n          if (otherdata.id != newCart.id) {\n            this.cart.push(otherdata);\n          }\n        });\n      }\n    },\n  },\n  mounted() {\n    this.addProduct();\n  },\n  computed: {\n    ifEmpty() {\n      return this.cart.length === 0 ? \"Cart is empty....\" : undefined;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.table {\n  width: 60%;\n  margin: 0 auto;\n}\n.cart-img img {\n  width: 50px;\n}\n.pointer{\n  position: relative;\n    right: 0;\n    left: 270px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}