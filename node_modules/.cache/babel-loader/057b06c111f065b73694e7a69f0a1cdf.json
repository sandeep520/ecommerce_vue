{"ast":null,"code":"import router from \"@/router\";\nimport { required, email, minLength, maxLength } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"SignupForm\",\n\n  data() {\n    return {\n      id: 1,\n      fullname: \"\",\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      phone: \"\",\n      users: []\n    };\n  },\n\n  validations: {\n    fullname: {\n      required\n    },\n    address: {\n      required\n    },\n    email: {\n      required,\n      email\n    },\n    phone: {\n      required\n    },\n    password: {\n      required,\n      minLength: minLength(6),\n      maxLength: maxLength(18)\n    }\n  },\n  methods: {\n    validationStatus(validation) {\n      return typeof validation != \"undefined\" ? validation.$error : false;\n    },\n\n    async submit() {\n      this.$v.$touch();\n\n      if (this.fullname && this.email && this.password && this.address && this.phone) {\n        let result = await axios.post(\"http://localhost:3000/users\", {\n          fullname: this.fullname,\n          email: this.email,\n          password: this.password,\n          address: this.address,\n          phone: this.phone\n        });\n        console.log(result.data);\n        alert(\"SignUp successfully\");\n        router.push(\"/login\");\n        localStorage.setItem(\"user\", JSON.stringify(result.data));\n      } else {\n        alert(\"Please fill the form\");\n      }\n    },\n\n    mounted() {\n      let user = localStorage.getItem(\"user\");\n\n      if (user) {\n        router.push(\"/login\");\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiHA;AACA,SACAA,QADA,EAEAC,KAFA,EAGAC,SAHA,EAIAC,SAJA,QAKA,0BALA;AAMA;AACA;EACAC,kBADA;;EAEAC;IACA;MACAC,KADA;MAEAC,YAFA;MAGAN,SAHA;MAIAO,WAJA;MAKAC,YALA;MAMAC,SANA;MAOAC;IAPA;EASA,CAZA;;EAaAC;IACAL;MAAAP;IAAA,CADA;IAEAQ;MAAAR;IAAA,CAFA;IAGAC;MAAAD;MAAAC;IAAA,CAHA;IAIAS;MAAAV;IAAA,CAJA;IAKAS;MAAAT;MAAAE;MAAAC;IAAA;EALA,CAbA;EAqBAU;IACAC;MACA;IACA,CAHA;;IAKA;MACA;;MACA;QACA;UAEAP,uBAFA;UAGAN,iBAHA;UAIAQ,uBAJA;UAKAD,qBALA;UAMAE;QANA;QAQAK;QACAC;QACAC;QACAC;MACA,CAbA,MAaA;QACAF;MACA;IACA,CAvBA;;IAwBAG;MACA;;MACA;QACAF;MACA;IACA;;EA7BA;AArBA","names":["required","email","minLength","maxLength","name","data","id","fullname","address","password","phone","users","validations","methods","validationStatus","console","alert","router","localStorage","mounted"],"sourceRoot":"src/components","sources":["SignUp.vue"],"sourcesContent":["<template>\n  <div class=\"form mt-5\">\n    <div class=\"text-center\">\n      <h1>Sign Up Page</h1>\n    </div>\n    <form id=\"signup-form\" v-on:submit.prevent=\"submit\">\n      <div class=\"row\">\n        <div class=\"col-12 form-group\">\n          <label class=\"col-form-label col-form-label-lg\"\n            >Full Name <span class=\"text-danger\">*</span></label\n          >\n          <input\n            type=\"text\"\n            v-model.trim=\"$v.fullname.$model\"\n            :class=\"{ 'is-invalid': validationStatus($v.fullname) }\"\n            class=\"form-control form-control-lg\"\n          />\n          <div v-if=\"!$v.fullname.required\" class=\"invalid-feedback\">\n            The full name field is required.\n          </div>\n        </div>\n        <div class=\"col-12 form-group\">\n          <label class=\"col-form-label col-form-label-lg\"\n            >Email <span class=\"text-danger\">*</span></label\n          >\n          <input\n            type=\"email\"\n            v-model.trim=\"$v.email.$model\"\n            :class=\"{ 'is-invalid': validationStatus($v.email) }\"\n            class=\"form-control form-control-lg\"\n          />\n          <div v-if=\"!$v.email.required\" class=\"invalid-feedback\">\n            The email field is required.\n          </div>\n          <div v-if=\"!$v.email.email\" class=\"invalid-feedback\">\n            The email is not valid.\n          </div>\n        </div>\n        <div class=\"col-12 form-group\">\n          <label class=\"col-form-label col-form-label-lg\"\n            >Address <span class=\"text-danger\">*</span></label\n          >\n          <input\n            type=\"text\"\n            v-model.trim=\"$v.address.$model\"\n            :class=\"{ 'is-invalid': validationStatus($v.address) }\"\n            class=\"form-control form-control-lg\"\n          />\n          <div v-if=\"!$v.address.required\" class=\"invalid-feedback\">\n            The address field is required.\n          </div>\n        </div>\n\n        <div class=\"col-12 form-group\">\n          <label class=\"col-form-label col-form-label-lg\"\n            >Password <span class=\"text-danger\">*</span></label\n          >\n          <input\n            type=\"password\"\n            v-model.trim=\"$v.password.$model\"\n            :class=\"{ 'is-invalid': validationStatus($v.password) }\"\n            class=\"form-control form-control-lg\"\n          />\n          <div v-if=\"!$v.password.required\" class=\"invalid-feedback\">\n            The password field is required.\n          </div>\n          <div v-if=\"!$v.password.minLength\" class=\"invalid-feedback\">\n            You must have at least\n            {{ $v.password.$params.minLength.min }} letters.\n          </div>\n          <div v-if=\"!$v.password.maxLength\" class=\"invalid-feedback\">\n            You must not have greater then\n            {{ $v.password.$params.maxLength.min }} letters.\n          </div>\n          \n        </div>\n\n        <div class=\"col-12 form-group\">\n          <label class=\"col-form-label col-form-label-lg\"\n            >phone <span class=\"text-danger\">*</span></label\n          >\n          <input\n            type=\"phone\"\n            v-model.trim=\"$v.phone.$model\"\n            :class=\"{ 'is-invalid': validationStatus($v.phone) }\"\n            class=\"form-control form-control-lg\"\n          />\n          <div v-if=\"!$v.phone.required\" class=\"invalid-feedback\">\n            The phone number field is required.\n          </div>\n          <!-- <div v-if=\"!$v.phone.minLength\" class=\"invalid-feedback\">\n            You must have at least\n            {{ $v.phone.$params.minLength.min }} letters.\n          </div>\n          <div v-if=\"!$v.phone.maxLength\" class=\"invalid-feedback\">\n            You must not have greater then\n            {{ $v.phone.$params.maxLength.min }} letters.\n          </div> -->\n        </div>\n        \n        <div class=\"mt-2\">\n            <span>You have already Account? </span\n            ><router-link to=\"/login\">Login</router-link>\n          </div>\n\n        <div class=\"col-12 mt-4 form-group text-center\">\n          <button class=\"btn btn-primary btn-lg col-4\">Sign Up</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n<script>\nimport router from \"@/router\";\nimport {\n  required,\n  email,\n  minLength,\n  maxLength,\n} from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"SignupForm\",\n  data() {\n    return {\n      id: 1,\n      fullname: \"\",\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      phone:\"\",\n      users: [],\n    };\n  },\n  validations: {\n    fullname: { required },\n    address: { required },\n    email: { required, email },\n    phone: {required },\n    password: { required, minLength: minLength(6), maxLength: maxLength(18) },\n  },\n\n  methods: {\n    validationStatus(validation) {\n      return typeof validation != \"undefined\" ? validation.$error : false;\n    },\n\n    async submit() {\n      this.$v.$touch();\n      if (this.fullname && this.email && this.password && this.address && this.phone) {\n        let result = await axios.post(\"http://localhost:3000/users\", {\n          \n          fullname: this.fullname,\n          email: this.email,\n          password: this.password,\n          address: this.address,\n          phone: this.phone\n        });\n        console.log(result.data);\n        alert(\"SignUp successfully\");\n        router.push(\"/login\");\n        localStorage.setItem(\"user\", JSON.stringify(result.data));\n      } else {\n        alert(\"Please fill the form\");\n      }\n    },\n    mounted() {\n      let user = localStorage.getItem(\"user\");\n      if (user) {\n        router.push(\"/login\");\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.form {\n  text-align: start;\n  width: 40%;\n  margin: 0 auto;\n  padding: 20px;\n  box-shadow: 5px 13px 21px #888888;\n  border-radius: 25px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}